{
  "env": {
    "browser": true,
    "node": true,
    "jest": true,
    "jasmine": true,
    "es6": true
  },
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 2019,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": ["import", "@typescript-eslint", "functional"],
  "settings": {
    "import/extensions": [
      ".es",
      ".esm",
      ".es6",
      ".cjs",
      ".ts",
      ".tsx",
      ".js",
      ".jsx"
    ],
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "node": {
        "extensions": [
          ".es",
          ".esm",
          ".es6",
          ".cjs",
          ".ts",
          ".tsx",
          ".js",
          ".jsx"
        ]
      }
    },
    "jsdoc": {
      "tagNamePreference": {
        "return": ""
      }
    },
    "react": {
      "version": "detect"
    }
  },
  "parser": "@typescript-eslint/parser",
  "globals": {
    "globalThis": false
  },
  "rules": {
    "jsdoc/require-jsdoc": "off",
    "jsdoc/require-returns": "off",
    "jsdoc/require-param": "off",
    "jsdoc/check-tag-names": "warn",
    "jsdoc/newline-after-description": "off",
    "jsdoc/require-param-type": "off",
    "jsdoc/require-param-description": "off",
    "no-bitwise": "error",
    "no-console": [
      "warn",
      {
        "allow": ["warn", "clear", "error"]
      }
    ],
    "no-empty": ["warn", { "allowEmptyCatch": true }],
    "radix": "error",
    "import/no-default-export": "off",
    "no-else-return": ["error", { "allowElseIf": false }],
    "no-lonely-if": "error",
    "prefer-destructuring": [
      "error",
      {
        "array": false,
        "object": true
      },
      { "enforceForRenamedProperties": false }
    ],
    "object-shorthand": ["error", "properties"],
    "multiline-ternary": ["error", "always-multiline"],
    "operator-linebreak": [
      "error",
      "before",
      {
        "overrides": {
          "=": "none",
          "==": "none",
          "===": "none"
        }
      }
    ],
    "no-unused-vars": [
      "error",
      {
        "vars": "local",
        "args": "none",
        "ignoreRestSiblings": true,
        "argsIgnorePattern": "^_",
        "caughtErrors": "none"
      }
    ],
    "no-use-before-define": "warn",
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "pathGroupsExcludedImportTypes": ["builtin", "react"],
        "pathGroups": [
          {
            "pattern": "react",
            "group": "external",
            "position": "before"
          }
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "new-parens": "error",
    "max-len": [
      "error",
      {
        "code": 90,
        "ignoreTrailingComments": true,
        "ignoreUrls": true,
        "ignoreRegExpLiterals": true,
        "ignoreStrings": true
      }
    ],
    "indent": "off",
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "*",
        "next": ["if", "for", "while", "switch"]
      },
      { "blankLine": "always", "prev": "*", "next": "return" },
      { "blankLine": "always", "prev": ["const", "let"], "next": "*" },
      {
        "blankLine": "any",
        "prev": ["const", "let"],
        "next": ["export", "const", "let"]
      }
    ],
    "eol-last": "error",
    "valid-jsdoc": "off", // valid-jsdoc задепрекейчен в связи с наличием eslint-plugin-jsdoc
    "dot-notation": "error",
    "quote-props": ["error", "as-needed", { "keywords": true }],
    "no-multiple-empty-lines": ["error", { "max": 2 }],
    "one-var": ["error", "never"],
    "prefer-arrow-callback": ["error", { "allowNamedFunctions": true }],
    "no-restricted-globals": [
      "error",
      {
        "name": "event",
        "message": "Use local parameter instead."
      },
      {
        "name": "fdescribe",
        "message": "Do not commit fdescribe. Use describe() instead."
      },
      {
        "name": "fit",
        "message": "Do not commit fit. Use it() instead."
      }
    ],
    "no-eval": "error",
    "no-new-func": "error",
    "no-implied-eval": "error",
    "no-prototype-builtins": "warn",
    "no-extra-boolean-cast": "warn",
    "no-useless-escape": "warn",
    "guard-for-in": "error",
    "no-labels": [
      "error",
      {
        "allowLoop": false,
        "allowSwitch": false
      }
    ],
    "no-unused-labels": "error",
    "no-caller": "error",
    "no-cond-assign": "error",
    "no-new-wrappers": "error",
    "no-debugger": "error",
    "no-redeclare": "error",
    "no-fallthrough": "error",
    "no-unused-expressions": "error",
    "no-var": "error",
    "prefer-const": ["error", { "destructuring": "any" }],
    "eqeqeq": "error",
    "use-isnan": [
      "error",
      { "enforceForSwitchCase": true, "enforceForIndexOf": true }
    ],
    "no-empty-function": [
      "error",
      {
        "allow": [
          "arrowFunctions",
          "constructors",
          "setters",
          "getters",
          "methods"
        ]
      }
    ],
    "no-nested-ternary": "error",
    "no-undef": "error",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "vars": "local",
        "args": "none",
        "ignoreRestSiblings": true,
        "argsIgnorePattern": "^_",
        "caughtErrors": "none"
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": true
        }
      },
      {
        "selector": "class",
        "format": ["PascalCase"]
      }
    ],
    "@typescript-eslint/no-use-before-define": "warn",
    "@typescript-eslint/no-inferrable-types": [
      "error",
      {
        "ignoreParameters": true,
        "ignoreProperties": false
      }
    ],
    "@typescript-eslint/prefer-namespace-keyword": "error",
    "@typescript-eslint/array-type": ["error", { "default": "array-simple" }],
    "@typescript-eslint/prefer-readonly": "off", // Автофикс предпочтения readonly вызывает проблемы
    "functional/prefer-readonly-type": "off", // Автофикс предпочтения readonly вызывает проблемы
    "no-dupe-class-members": "off", // https://github.com/typescript-eslint/typescript-eslint/issues/291

    "curly": ["error", "all"]
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:prettier/recommended",
    "plugin:jsdoc/recommended",
    "prettier"
  ],
  "overrides": [
    {
      "files": ["*.tsx"],
      "rules": {
        "react/prop-types": "off",
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "warn"
      },
      "plugins": ["react-hooks"]
    }
  ]
}
